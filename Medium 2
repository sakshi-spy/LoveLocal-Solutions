********************************************************************************************************************************************************************************************************************

Question :--
Medium 2 

Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Example 1:
Input: nums = [3,2,3]
Output: [3]

Example 2:
Input: nums = [1]
Output: [1]

Example 3:
Input: nums = [1,2]
Output: [1,2]

Constraints:
1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109

*******************************************************************************************************************************************************************************************************************

Solution:--

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class MajorityElements {

    public List<Integer> majorityElements(int[] nums) {
        List<Integer> result = new ArrayList<>();

        int candidate1 = 0, count1 = 0;
        int candidate2 = 0, count2 = 0;

        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }
        if (count1 > nums.length / 3) {
            result.add(candidate1);
        }
        if (count2 > nums.length / 3) {
            result.add(candidate2);
        }
        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String[] values = scanner.nextLine().split(",");
        int[] nums = new int[values.length];
        for (int i = 0; i < values.length; i++) {
            nums[i] = Integer.parseInt(values[i].trim());
        }
        MajorityElements solution = new MajorityElements();
        List<Integer> result = solution.majorityElements(nums);
        System.out.println(result);
        scanner.close();
    }
}

***************************************************************************************************************************************************************************************************************

Explaination :--

***Import Statements*** : Import necessary classes from java.util for handling ArrayList and Scanner.

***MajorityElements Class*** : The class contains two methods: majorityElements for finding elements appearing more than n/3 times, and main for user input and output.

***majorityElements Method*** : This method takes an array of integers (nums) as input and returns a list of elements appearing more than n/3 times.
                                It uses the Boyer-Moore Majority Vote algorithm to find two potential candidates.
                                It then validates the candidates by counting their occurrences in the array.
                                Finally, it checks if the candidates appear more than n/3 times and adds them to the result list.

***main Method*** : This method is the entry point of the program.
                    It uses a Scanner to read input from the console.
                    It reads the array elements as a comma-separated string, converts them to an integer array, and constructs an instance of MajorityElements.
                    It calls the majorityElements method to find the majority elements and prints the result.

***User Input*** : The user is prompted to enter the array elements as a comma-separated string from the console.

***Output*** : The program prints the list of elements appearing more than n/3 times in the array.

***Closing the Scanner*** : It's essential to close the Scanner to prevent resource leaks.
