*********************************************************************************************************************************************************************************************************************

Question :--
Medium 3
Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.
Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] is '0' or '1'.

Example 1:
Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4

Example 2:
Input: matrix = [["0","1"],["1","0"]]
Output: 1

Example 3:
Input: matrix = [["0"]]
Output: 0

*******************************************************************************************************************************************************************************************************************

Solution :--

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class MaximalSquare {

    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int maxSquareSide = 0;
        for (int i = 0; i < m; i++) {
            dp[i][0] = matrix[i][0] - '0';
            maxSquareSide = Math.max(maxSquareSide, dp[i][0]);
        }
        for (int j = 0; j < n; j++) {
            dp[0][j] = matrix[0][j] - '0';
            maxSquareSide = Math.max(maxSquareSide, dp[0][j]);
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][j] == '1') {
                    dp[i][j] = Math.min(dp[i-1][j], Math.min(dp[i][j-1], dp[i-1][j-1])) + 1;
                    maxSquareSide = Math.max(maxSquareSide, dp[i][j]);
                }
            }
        }

        return maxSquareSide * maxSquareSide;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<String> inputRows = new ArrayList<>();
        String inputRow;
        while (scanner.hasNextLine() && !(inputRow = scanner.nextLine()).equalsIgnoreCase("exit")) {
            inputRows.add(inputRow);
        }
        if (inputRows.isEmpty()) {
            System.out.println("No matrix input provided. Exiting.");
            return;
        }

        int m = inputRows.size();
        int n = inputRows.get(0).split(" ").length;

        char[][] matrix = new char[m][n];
        for (int i = 0; i < m; i++) {
            String[] numbers = inputRows.get(i).split(" ");
            for (int j = 0; j < n; j++) {
                matrix[i][j] = numbers[j].charAt(0);
            }
        }

        MaximalSquare solution = new MaximalSquare();
        int maxSquareArea = solution.maximalSquare(matrix);
        System.out.println(maxSquareArea);
        scanner.close();
    }
}

******************************************************************************************************************************************************************************************************************

***import java.util.ArrayList;*** :This import statement brings in the ArrayList class from the java.util package. ArrayList is a dynamic array implementation in Java, and it's used here to store rows of input.

***import java.util.List;*** : This import statement brings in the List interface from the java.util package. The List interface is implemented by classes like ArrayList, 
                               and it provides an ordered collection that allows for duplicate elements.

***import java.util.Scanner;*** :This import statement brings in the Scanner class from the java.util package. The Scanner class is used to read user input from the console in this code.

***maximalSquare Method*** : This method takes a 2D array matrix as input and returns the area of the largest square containing only 1's. It uses dynamic programming to fill a matrix dp, 
                             where dp[i][j] represents the side length of the square ending at position (i, j).

***main Method*** : This method handles user input. It reads rows of space-separated numbers until the user enters "exit". It then converts the input into a character matrix and calculates 
                    the maximal square area using the maximalSquare method. The result is printed to the console.

***User Input*** : The user provides input row by row, where each row contains space-separated numbers ('0' or '1'). The program converts this input into a 2D character matrix.

***Dynamic Programming*** : The algorithm uses dynamic programming to efficiently calculate the side length of the largest square ending at each position. The maximum side length is tracked, 
                            and the result is the square of this maximum side length.
