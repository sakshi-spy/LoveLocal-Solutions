******************************************************************************************************************************************************************************************************************

Question:--
Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants 
(where we allow a node to be a descendant of itself).”

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.

Constraints:
The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the BST.

*******************************************************************************************************************************************************************************************************************

Solution :--

import java.util.Scanner;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
        val = x;
    }
}

public class LowestCommonAncestor {

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null) {
            return null;
        }
        if (p.val < root.val && q.val < root.val) {
            return lowestCommonAncestor(root.left, p, q);
        }
        if (p.val > root.val && q.val > root.val) {
            return lowestCommonAncestor(root.right, p, q);
        }
        return root;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] values = scanner.nextLine().split(",");
        TreeNode root = constructBST(values);

        int pValue = scanner.nextInt();
        int qValue = scanner.nextInt();

        TreeNode p = new TreeNode(pValue);
        TreeNode q = new TreeNode(qValue);
        LowestCommonAncestor solution = new LowestCommonAncestor();
        TreeNode lca = solution.lowestCommonAncestor(root, p, q);
        System.out.println(lca.val);
        scanner.close();
    }

private static TreeNode constructBST(String[] values) {
    if (values == null || values.length == 0 || values[0].trim().isEmpty() || values[0].trim().equalsIgnoreCase("null")) {
        return null;
    }
    TreeNode root = new TreeNode(Integer.parseInt(values[0].trim()));
    for (int i = 1; i < values.length; i++) {
        if (!values[i].trim().isEmpty() && !values[i].trim().equalsIgnoreCase("null")) {
            insertIntoBST(root, Integer.parseInt(values[i].trim()));
        }
    }
    return root;
}

    private static void insertIntoBST(TreeNode root, int value) {
        if (value < root.val) {
            if (root.left == null) {
                root.left = new TreeNode(value);
            } else {
                insertIntoBST(root.left, value);
            }
        } else {
            if (root.right == null) {
                root.right = new TreeNode(value);
            } else {
                insertIntoBST(root.right, value);
            }
        }
    }
}

************************************************************************************************************************************************************************************************************

Explaination :--

***import java.util.Scanner;*** : 
