*********************************************************************************************************************************************************************************************************************

Question :--
Hard 1 
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. 
Each time the sliding window moves right by one position. Return the max sliding window.                                                             
Constraints:                                                                                                                                                                                      
1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length                                                                                                                                                                          

Example 1:
Input: nums = [1], k = 1
Output: [1]

Example 2:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

******************************************************************************************************************************************************************************************************************

Solution:--

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Scanner;
import java.util.Arrays; 

public class MaxSlidingWindow {

    public static int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return new int[0];
        }

        int n = nums.length;
        int[] result = new int[n - k + 1];
        int resultIndex = 0;

        Deque<Integer> deque = new ArrayDeque<>();
        for (int i = 0; i < k; i++) {
            while (!deque.isEmpty() && nums[i] > nums[deque.peekLast()]) {
                deque.pollLast();
            }
            deque.offerLast(i);
        }
        for (int i = k; i < n; i++) {
            result[resultIndex++] = nums[deque.peekFirst()];
            while (!deque.isEmpty() && deque.peekFirst() <= i - k) {
                deque.pollFirst();
            }
            while (!deque.isEmpty() && nums[i] > nums[deque.peekLast()]) {
                deque.pollLast();
            }

            deque.offerLast(i);
        }
        result[resultIndex] = nums[deque.peekFirst()];

        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String[] input = scanner.nextLine().split(" ");
        int[] nums = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            nums[i] = Integer.parseInt(input[i]);
        }
        int k = scanner.nextInt();
        int[] result = maxSlidingWindow(nums, k);
        System.out.println( Arrays.toString(result));
        scanner.close();
    }
}

***************************************************************************************************************************************************************************************************************

Explaination : 

***Import Statements*** : These are import statements to include necessary classes from the Java standard library.
                          ArrayDeque: A double-ended queue that supports element insertion and removal at both ends.
                          Deque: An interface representing a double-ended queue.
                          Arrays: A utility class that provides various methods for manipulating arrays.
                          Scanner: A class that provides methods for parsing primitive types and strings using regular expressions.

***maxSlidingWindow Method*** : This method takes an array of integers (nums) and an integer k representing the size of the sliding window.
                                It returns an array containing the maximum elements in each sliding window.

***Sliding Window Processing*** : The method uses a Deque<Integer> (double-ended queue) to maintain indices of elements in the current window in a way that the front of the deque always represents the maximum element.
                                  It iterates through the array, processing each element to update the deque and calculate the maximum elements for each window.

***main Method*** : This is the main method, serving as the entry point of the program.
                    It takes user input for the array elements and the window size.
                    It calls the maxSlidingWindow method to calculate the maximum sliding window.
                    It prints the result using System.out.println.   

***User Input Processing*** : The program uses a Scanner to read input from the console.
                              Users are prompted to enter array elements and the window size.

***Arrays Class*** : The Arrays class is used to convert the result array to a string for printing.
                     It provides the toString method for converting an array to a string representation.

***Closing Scanner*** : This line is used to close the Scanner to release system resources.
