**************************************************************************************************************************************************************************************************************

Question :--
Easy 2
Given an integer array nums where the elements are sorted in ascending order, convert it to a 
height-balanced binary search tree.
 
Example 1:

Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:

Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
 
Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.

*******************************************************************************************************************************************************************************************************************

Solution :--

import java.util.Scanner;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
        val = x;
    }
}

public class SortedArrayToBST {

    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums == null || nums.length == 0) {
            return null;
        }

        return sortedArrayToBST(nums, 0, nums.length - 1);
    }

    private TreeNode sortedArrayToBST(int[] nums, int left, int right) {
        if (left > right) {
            return null;
        }
        int mid = left + (right - left) / 2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = sortedArrayToBST(nums, left, mid - 1);
        root.right = sortedArrayToBST(nums, mid + 1, right);
        return root;
    }

    private void inorderTraversal(TreeNode root) {
        if (root != null) {
            inorderTraversal(root.left);
            System.out.print(root.val + " ");
            inorderTraversal(root.right);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the elements of the sorted array (comma-separated):");
        String[] numsStr = scanner.nextLine().split(",");
        int[] nums = new int[numsStr.length];
        for (int i = 0; i < numsStr.length; i++) {
            nums[i] = Integer.parseInt(numsStr[i].trim());
        }

        SortedArrayToBST converter = new SortedArrayToBST();
        TreeNode result = converter.sortedArrayToBST(nums);
        converter.inorderTraversal(result);
        scanner.close();
    }
}

**************************************************************************************************************************************************************************************************************

Explaination:--

***Importing Scanner Class*** : This line imports the Scanner class, which is part of the java.util package. The Scanner class is used to read input from the console.

***Taking Input for nums Array*** : This code prompts the user to enter the elements of the sorted array, expecting them to be comma-separated.
                                    scanner.nextLine() reads the entire line entered by the user.
                                    split(",") is used to split the line into an array of strings based on commas.
                                    A loop is used to convert each string to an integer and store it in the nums array.

***Using Scanner for Input*** : This line creates an instance of the Scanner class, which is used to read input from the console. System.in represents the standard input stream (console).

***Closing the Scanner*** : This line closes the Scanner object to release the associated resources when it's no longer needed.
