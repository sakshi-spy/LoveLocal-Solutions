*****************************************************************************************************************************************************************

Question :--
Easy 3
Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Input: numRows = 1
Output: [[1]]

1 <= numRows <= 30

*******************************************************************************************************************************************************************

Solution :--

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class PascalTriangle {

    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < numRows; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j <= i; j++) {
                if (j == 0 || j == i) {
                    row.add(1);
                } else {
                    int val = result.get(i - 1).get(j - 1) + result.get(i - 1).get(j);
                    row.add(val);
                }
            }
            result.add(row);
        }
        return result;
    }

    public static void main(String[] args) {
        PascalTriangle pascalTriangle = new PascalTriangle();
        Scanner sc=new Scanner(System.in);
        int numRows = sc.nextInt();
        List<List<Integer>> result = pascalTriangle.generate(numRows);
        for (List<Integer> row : result) {
            System.out.println(row);
        }
    }
}


***************************************************************************************************************************************************************

Explanation :

***import java.util.ArrayList;***: This imports the ArrayList class from the java.util package.
                                   ArrayList is a part of the Java Collections Framework and is a dynamic array implementation,
                                   which means it can dynamically grow or shrink in size.

***import java.util.List;***: This imports the List interface from the java.util package.
                              List is an interface that represents an ordered collection (sequence) and is a part of the Java Collections Framework. 
                              Implementations of the List interface include ArrayList, LinkedList, etc.

***import java.util.Scanner;***: This imports the Scanner class from the java.util package.
                                 Scanner is a class in Java that provides methods for reading different types of input, including primitive types like int and double, 
                                 and Strings, from various input sources such as the console (System.in).

***public List<List<Integer>> generate(int numRows)***: This method is public, returns a List of List of Integer, and takes an integer parameter numRows.
                                 * List<List<Integer>> result = new ArrayList<>();: This initializes a new ArrayList named result. 
                                                                                  The outer list (List<List<Integer>>) represents the entire Pascal's Triangle, 
                                                                                  and each inner list represents a row in the triangle.
                                 * for (int i = 0; i < numRows; i++) : This loop iterates from 0 to numRows - 1, creating rows in Pascal's Triangle.
                                 * List<Integer> row = new ArrayList<>();: This initializes a new ArrayList named row. Each row represents a single row in Pascal's Triangle.
                                 * for(int j = 0; j <= i; j++) : This loop iterates from 0 to i (inclusive), creating columns in the current row.
                                 * if (j == 0 || j == i) { row.add(1); }: If j is the first or last element in the row (j == 0 or j == i), add 1 to the row.
                                 * else { int val = result.get(i - 1).get(j - 1) + result.get(i - 1).get(j); row.add(val); }: Otherwise, calculate the value based on the 
                                                                                      sum of the two numbers above in the previous row and add it to the current row.
                                 * result.add(row);: Add the newly created row to the result, representing the entire Pascal's Triangle up to the current row.
                                 * return result;: Return the final result, which is Pascal's Triangle as a list of lists.

***public static void main(String[] args)***: This is the main method, the entry point for the Java program. 
                                              It is declared as public (accessible from outside the class), static (can be called without creating an 
                                              instance of the class), and returns void (does not return any value).
                                            * PascalTriangle pascalTriangle = new PascalTriangle();: This line creates an instance of the PascalTriangle class named pascalTriangle. 
                                                                              This instance will be used to call the generate method.
                                            * Scanner sc = new Scanner(System.in);: This line creates a Scanner object named sc, which is used to read input from the console (System.in).
                                            * int numRows = sc.nextInt();: This line reads an integer (the number of rows for Pascal's Triangle) from the user input using the Scanner object.
                                            * List<List<Integer>> result = pascalTriangle.generate(numRows);: This line calls the generate method of the pascalTriangle instance, 
                                                                          passing the user-inputted numRows as a parameter. The result is a list of lists representing Pascal's Triangle.
                                            * for (List<Integer> row : result) { System.out.println(row); }: This loop iterates through each row in the result and prints it to the console. 
                                                                       The System.out.println(row) prints each row on a new line.
